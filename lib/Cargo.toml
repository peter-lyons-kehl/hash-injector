[package]
name = "hash-injector"
version = "0.1.0"
edition = "2024"

license = "BSD-2-Clause OR Apache-2.0 OR MIT"
rust-version = "1.85.0"

authors = ["Peter Lyons Kehl<peter.kehl@gmail.com>"]
description = "Hasher+BuildHasher to inject particular hash"

categories = ["algorithms", "data-structures", "no-std", "rust-patterns"]

keywords = ["cache", "lru", "hashmap", "data-structures"]

repository = "https://github.com/peter-lyons-kehl/hash-injector"
homepage = "https://github.com/peter-lyons-kehl/hash-injector"
readme = "../README.md"

[dependencies]
# ???
# parking_lot
# lock_api
# spin
# no_mutex
# critical-section

[lints.rust]
unexpected_cfgs = { level = "forbid"}

[features]

# TODO Serde

# Whether to implement From<String> for SignalStrs, so that the consumer can provide her/his own
# String that is used for string slices when signalling. It requires "alloc" library, but it's
# no_std.
string = []

# Asserts (in either debug and release mode). Expensive.
chk = []

# Whether to use a higher level type for the const generic parameter type ProtocolFlags. Requires nightly toolchain.
flags = []

# Use to check that the Hasher is (or behaves like) `SignalledInjectionHasher`. Use only if the
# types that inject hashes (that is, types whose hash(...) calls `signal_inject_hash()`), are never
# to be used with any incompatible Hasher.
#
# Expensive depending on
# - the underlying Hasher (its `finish(self)`), or
# - the "original" hashed type containing (directly or indirectly) arrays or slices, especially if
#   multiple.
chk-hash = []

# Check that signal_first(F) for const generic F is the same between `signal_inject_hash(...)` and
# `SignalledInjectionHasher`.
#
# NOT very expensive.
chk-flow = []

# Using Mutex. It requires "std" library, but it uses safe code. On its own it's slower than Mutex
# with "mx-ptr" feature.
mx = []

# Using Mutex's data_ptr function to get signalling string slices. It involves trivial unsafe code,
# used only for creation of static signalling string slices/pointers.
mx-ptr = ["mx"]

# Using lzLock. It requires "std" library, but it uses safe code. Slower than Mutex with "mx-ptr"
# feature.
lz = []

# Some combinations of features. Do leave trailing spaces on empty lines, for up & down navigation.
#                                                                                 
#           Logic/functionality:                  ||        Checks:
#                                                 ||
# Simple/Safe:                  | Unsafe/         || Cheap             Expensive
#                               | unstable:       || on left:          on right:
#                               |                 ||                               
#default = [                                         "chk-flow"                   ]
#default = [                                                     "chk-hash"       ]
#default = [                                                                 "chk"]
#default = [                                         "chk-flow", "chk-hash", "chk"]
#default = [                                "flags"                               ]
#default = [                                "flags", "chk-flow", "chk-hash", "chk"]
#                               |                 ||                               
#default = ["string"                                                              ]
#default = ["string",                                "chk-flow", "chk-hash", "chk"]
#default = ["string",                       "flags"                               ]
#default = ["string",                       "flags", "chk-flow", "chk-hash", "chk"]
#                               |                 ||                               
#default = [          "lz"                                                        ]
#default = [          "lz",                          "chk-flow", "chk-hash", "chk"]
#default = [          "lz",                 "flags"                               ]
#default = [          "lz",                 "flags", "chk-flow", "chk-hash", "chk"]
#                               |                 ||                               
#default = [                "mx"                                                  ]
#default = [                "mx", "mx-ptr"                                        ]
#                               |                 ||                               
#default = [                "mx", "mx-ptr",          "chk-flow", "chk-hash", "chk"]
#default = [                "mx", "mx-ptr",          "chk-flow", "chk-hash", "chk"]
#                               |                 ||                               
#default = [                "mx", "mx-ptr", "flags"                               ]
#default = [                "mx", "mx-ptr", "flags"                               ]
#                               |                 ||                               
#default = [                "mx", "mx-ptr", "flags", "chk-flow", "chk-hash", "chk"]
#default = [                "mx", "mx-ptr", "flags", "chk-flow", "chk-hash", "chk"]
#                               |                 ||                               
# ALL logical/functional features:                                                 
#                               |                 ||                               
#default = ["string", "lz", "mx", "mx-ptr"                                        ]
#default = ["string", "lz", "mx", "mx-ptr",          "chk-flow"                   ]
#default = ["string", "lz", "mx", "mx-ptr",                      "chk-hash"       ]
#default = ["string", "lz", "mx", "mx-ptr",                                  "chk"]
#default = ["string", "lz", "mx", "mx-ptr",          "chk-flow", "chk-hash", "chk"]
#default = ["string", "lz", "mx", "mx-ptr", "flags"                               ]
#default = ["string", "lz", "mx", "mx-ptr", "flags", "chk-flow"                   ]
#default = ["string", "lz", "mx", "mx-ptr", "flags",             "chk-hash"       ]
#default = ["string", "lz", "mx", "mx-ptr", "flags",                         "chk"]
 default = ["string", "lz", "mx", "mx-ptr", "flags", "chk-flow", "chk-hash", "chk"]
