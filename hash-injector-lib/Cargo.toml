[package]
name = "hash-injector"
version = "0.1.0"
edition = "2024"

license = "BSD-2-Clause OR Apache-2.0 OR MIT"
rust-version = "1.85.0"

authors = ["Peter Lyons Kehl<peter.kehl@gmail.com>"]
description = "Hasher+BuildHasher to inject particular hash"

categories = ["algorithms", "caching", "data-structures"]

keywords = ["cache", "lru", "hashmap", "data-structures"]

[dependencies]

[lints.rust]
unexpected_cfgs = { level = "forbid"}

[features]
# Expensive
asserts = []

# Use to check that the Hasher is (or behaves like) `SignalledInjectionHasher`. Use only if the types
# that inject hashes (that is, types whose hash(...) calls `signal_inject_hash()`), are never to be
# used with any incompatible Hasher.
#
# Expensive depending on
# - the underlying Hasher (its `finish(self)`), or
# - the "original" hashed type containing (directly or indirectly) arrays or slices, especially if
#   multiple.
injector-checks-finish = []

# Check that SIGNAL_FIRST const generic is the same between `signal_inject_hash(...)` and
# `SignalledInjectionHasher`.
#
# Use ONLY if injector-checks-finish is enabled, too.
injector-checks-same-flow = []

#default = ["asserts"]
#default = ["asserts", "injector-checks-finish"]

# NOT allowed:
#default = [                                     "injector-checks-same-flow"]
# NOT allowed:
#default = ["asserts",                           "injector-checks-same-flow"]

#default = ["asserts", "injector-checks-finish", "injector-checks-same-flow"]
